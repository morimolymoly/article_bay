<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ArticleBay</title>
    <link>https://morimolymoly.github.io/article_bay/post/</link>
    <description>Recent content in Posts on ArticleBay</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Feb 2019 16:44:52 +0900</lastBuildDate>
    
	<atom:link href="https://morimolymoly.github.io/article_bay/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WIP:SNNのさーべい</title>
      <link>https://morimolymoly.github.io/article_bay/snn_survey/</link>
      <pubDate>Mon, 04 Feb 2019 16:44:52 +0900</pubDate>
      
      <guid>https://morimolymoly.github.io/article_bay/snn_survey/</guid>
      <description>introduction to spiking neural networks: information processing, learning and applications SNNのサーベイ的な論文を読んでメモる. 僕は神経科学とか機械学習の素人なのでいろいろあれかも
概要 SNN(Spiking Neural Network)はニューロンがスパイクするダイナミクスをモデル化した人工ニューラルネットワーク．
スパイクの特徴  ニューロンは複数の入力から一つのスパイクシグナルを出力する 興奮性，抑制性入力により発火の可能性をコントロールできる ニューロンは1つ以上の内部状態により管理されていて，それが閾値を超えると発火する  ネットワークトポロジ Feedforward networks 入力と出力の方向が1方向である．フィードバックがない．生体では脳の表面近くの組織で多く見つかる．
このネットワークは低レベルな感覚器官
Recurrent networks フィードバックもあるネットワーク．フィードバックにより，一時的で動的な発火が行われる．Feedforward networksより高級で演算性能に優れる．その分，学習とコントロールが難しい．
Hybrid networks このネットワークはFeedforward networksとRecurrent networksを持つことができるネットワーク．方向が単方向または双方向な場合もある．
Synfire chain 人間の学習は2つのイベントが相互関係を持っていたり，シグナルとその後の行動が結びついていることがしばしばある．
イベントは時間で分割できるが，正確に正しいタイミングで正しい行動を予測するために，人間はこれらをリンクさせる． synfireは遅延イベントを表現している．sinfire chainはチェインを組み合わせる複数レイヤのアーキテクチャである．これはニューロンの発火を同期的な波として他のレイヤに伝える．
Reservoir computing これはRecurrent networksの演算性能を活かしつつも，学習の難しさを克服したものである． あとでよむ
Spiking Neuronにおける情報処理 毎ミリセカンドごとに感覚器官から出力される膨大なスパイクを，感覚器官の刺激から行う行動を決定するために，これらを脳は処理する．
Neural code neural codeはニューラルシグナルでの情報のエンコーディング． firing rateが重要視されてきたが，timing</description>
    </item>
    
    <item>
      <title>WIP:Improving Agility and Elasticity in Bare-metal Clouds</title>
      <link>https://morimolymoly.github.io/article_bay/1/</link>
      <pubDate>Mon, 28 Jan 2019 17:33:14 +0900</pubDate>
      
      <guid>https://morimolymoly.github.io/article_bay/1/</guid>
      <description>問題 OS-deployment Problem * Image Copy * Reboot from Local Disk
従来手法 OS Streaming Deployment [Clerc et al. IPCCC’10]
ネットワークブートしながら，特殊なドライバでコピーする． * はやくてパフォーマンスがでる(結局ベアメタルだから) * OS依存
Conventional VMMs [VMware’01, Xen’03, KVM’07]
VMでストリーミングコピー * VMがハードウェアのエミュレーションとかにいるから遅い
提案手法 OS Deployment with a Special-purpose VMM
特殊なVMを作る * VMでストリーミングコピーする * VM化を解く(Bareflankとかでもやってる．結局vmxonするとかそういう話だし)</description>
    </item>
    
    <item>
      <title>やっていき</title>
      <link>https://morimolymoly.github.io/article_bay/aa/</link>
      <pubDate>Wed, 23 Jan 2019 18:43:52 +0900</pubDate>
      
      <guid>https://morimolymoly.github.io/article_bay/aa/</guid>
      <description>やっていきたい</description>
    </item>
    
  </channel>
</rss>